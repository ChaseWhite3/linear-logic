open List;;
open Printf;;

(** val set_app : 'a1 list -> 'a1 list -> 'a1 list **)

let rec set_cons e l =
 match l with
  | [] -> e :: []
  | f::l ->
    if e = f then
     l
    else
     f :: (set_cons e l)

let rec set_app l m =
  match l with
  | [] -> m
  | a::l1 -> set_cons a (set_app l1 m)

#include "basic.ml"

let rec format_formula f =
 match f with
  | F_Atom a -> 
    sprintf "%s" a
  | F_Impl (f0, f1) ->
    sprintf "(%s -o %s)" (format_formula f0) (format_formula f1)
  | F_Both (f0, f1) ->
    sprintf "(%s /\\ %s)" (format_formula f0) (format_formula f1)
  | F_Choo (f0, f1) ->
    sprintf "(%s \\/ %s)" (format_formula f0) (format_formula f1)
  | F_Eith (f0, f1) ->
    sprintf "(%s + %s)" (format_formula f0) (format_formula f1)
  | F_OfCo f0 ->
    sprintf "(! %s)" (format_formula f0) 

let print_formula f =
 printf "%s\n" (format_formula f)

let some_gamma =
#include "linearLogic-gamma.ml"
;;

let depth = int_of_string Sys.argv.(1) ;;
let formulas = (all_theorems depth some_gamma) ;;
let how_many = length formulas ;;

printf "%u\n" how_many ;;
 
iter print_formula formulas ;;
